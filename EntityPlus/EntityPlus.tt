<#@ template language="C#" debug="false" hostspecific="true"#>
<#@ include file="EF6.Utility.CS.ttinclude"#>
<#@ output extension=".txt"#><#

	// ----------------------------------------------------------------
    // -- NOTE: This is strictly for code generation. 
    //    Do not use the generated code as your actual entities.
	//
    // -- Require: Prismlibrary	http://prismlibrary.com/
    // ----------------------------------------------------------------

    // ****************************************************************
    // Configurations
    // ****************************************************************

	//// Application
    TessaConfig.CompanyName = "Multinerd";
    TessaConfig.AppName = "Tessa";
    TessaConfig.AppVersion = "1.2.3.4";

	//// Data Model (Entity Framework/OData .edmx file to use)
    TessaConfig.InputFile = @"Model.edmx";


    //// Use the UseAttributes interface on the models
    TessaConfig.UseAttributes = true;

    //// Use the INotifyPropertyChanged interface on the models
    TessaConfig.UseINotifyPropertyChanged = true;

    //// Use the UseIEditableObject interface on the models
    TessaConfig.UseIEditableObject = true;

    //// Use the UseIEditableObject interface on the models
    TessaConfig.GenerateSampleData = true;

    // ****************************************************************

    var	fileManager = EntityFrameworkTemplateFileManager.Create(this);

    var ef = new MetadataTools(this);
    var code = new CodeGenerationTools(this);
	var textTransform = DynamicTextTransformation.Create(this);

    var loader = new EdmMetadataLoader(textTransform.Host, textTransform.Errors);
	var itemCollection = loader.CreateEdmItemCollection(TessaConfig.InputFile).ToList();

    var typeMapper = new TypeMapper(code, ef, textTransform.Errors);

	if (!code.VerifyCaseInsensitiveTypeUniqueness(typeMapper.GetAllGlobalItems(itemCollection), TessaConfig.InputFile))
	{
		return string.Empty;
	}





	/*
	███████╗██╗███╗   ███╗██████╗ ██╗     ███████╗    ███████╗███╗   ██╗████████╗██╗████████╗██╗███████╗███████╗
	██╔════╝██║████╗ ████║██╔══██╗██║     ██╔════╝    ██╔════╝████╗  ██║╚══██╔══╝██║╚══██╔══╝██║██╔════╝██╔════╝
	███████╗██║██╔████╔██║██████╔╝██║     █████╗      █████╗  ██╔██╗ ██║   ██║   ██║   ██║   ██║█████╗  ███████╗
	╚════██║██║██║╚██╔╝██║██╔═══╝ ██║     ██╔══╝      ██╔══╝  ██║╚██╗██║   ██║   ██║   ██║   ██║██╔══╝  ╚════██║
	███████║██║██║ ╚═╝ ██║██║     ███████╗███████╗    ███████╗██║ ╚████║   ██║   ██║   ██║   ██║███████╗███████║
	╚══════╝╚═╝╚═╝     ╚═╝╚═╝     ╚══════╝╚══════╝    ╚══════╝╚═╝  ╚═══╝   ╚═╝   ╚═╝   ╚═╝   ╚═╝╚══════╝╚══════╝
	*/
    foreach (var entity in typeMapper.GetItemsToGenerate<EntityType>(itemCollection))
    {
        var filename = $"{entity.Name}.cs";
        fileManager.StartNewFile(filename);
#>
//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//
//
// <copyright file="<#=filename #>" company="<#=TessaConfig.CompanyName #>">
//     Copyright (c) <#=TessaConfig.CompanyName #>. All Rights Reserved.
// </copyright>
//------------------------------------------------------------------------------

<# /* Begin Using */ #>
using Prism.Mvvm;
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Diagnostics.CodeAnalysis;

<# /* Begin Namespace */ #>
namespace <#=code.EscapeNamespace(code.VsNamespaceSuggestion()) #>
{
<#
        var inherits = new List<string>();

        if (TessaConfig.UseINotifyPropertyChanged)
            inherits.Add("BindableBase");

        if (TessaConfig.UseIEditableObject)
            inherits.Add("IEditableObject");

        var inheritString = string.Join(", ", inherits);

        if (inherits.Any())
            inheritString = ": " + inheritString;
#>
	[GeneratedCode("<#=TessaConfig.AppName #>", "<#=TessaConfig.AppVersion #>")]
	/// <summary> <#=code.Escape(entity) #> model class.</summary>
	public partial class <#=code.Escape(entity) #> <#=inheritString #>
    {
<# /* Begin Constrctor */ #>
<#
        var propertiesWithDefaultValues = typeMapper.GetPropertiesWithDefaultValues(entity).ToList();
        var collectionNavigationProperties = typeMapper.GetCollectionNavigationProperties(entity).ToList();

        var simpleProperties = typeMapper.GetSimpleProperties(entity).ToList();
        var complexProperties = typeMapper.GetComplexProperties(entity).ToList();
        var navigationProperties = typeMapper.GetNavigationProperties(entity).ToList();

        if (propertiesWithDefaultValues.Any() || collectionNavigationProperties.Any() || complexProperties.Any())
        {
#>
		/// <summary> Initializes a new instance of the <see cref="<#=code.Escape(entity) #>"/> class.</summary>
		[SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
		public <#=code.Escape(entity) #>()
		{
<#
			foreach (var edmProperty in propertiesWithDefaultValues)
            {
#>
			this.<#=code.Escape(edmProperty) #> = <#=code.CreateLiteral(edmProperty.DefaultValue) #>;
<#
            }

			foreach (var navigationProperty in collectionNavigationProperties)
            {
#>
			this.<#=code.Escape(navigationProperty) #> = new HashSet<<#=code.GetTypeName(navigationProperty.ToEndMember.GetEntityType()) #>>();
<#
            }
		
			foreach (var complexProperty in complexProperties)
            {
#>
			this.<#=code.Escape(complexProperty) #> = new <#=code.GetTypeName(complexProperty.TypeUsage) #>();
<#
            }
#>
        }
<#
        }
#>	
<# /* End Constrctor */ #>
<# /* Begin Properties */ #>
<#
        // Simple
        foreach (var edmProperty in simpleProperties)
        {
#>
        /// <summary>Gets or sets the <#=code.Escape(edmProperty) #> property</summary>
<#
			if (TessaConfig.UseAttributes)
            {
                var attributes = new List<string>();
				
                if (ef.IsKey(edmProperty))
                    attributes.Add("Key");

                if (!ef.IsNullable(edmProperty))
                    attributes.Add("Required");

                var maxlength = TessaEntityHelpers.GetAttribute_MaxLength(edmProperty);
                if (maxlength > 0)
                    attributes.Add($"StringLength({maxlength})");

                var displayName = TessaEntityHelpers.GetAttribute_DisplayName(code.Escape(edmProperty));

                if (attributes.Any())
                {
#>
		[<#=string.Join(", ", attributes) #>]
<#
                }
#>
		[DisplayName("<#=displayName #>"), Display(Name = "<#=displayName #>")]
<#
            }

            if (TessaConfig.UseINotifyPropertyChanged)
            {
#>
		public <#=code.GetTypeName(edmProperty.TypeUsage) #> <#=code.Escape(edmProperty) #>
        {
            get { return this._<#=code.Escape(edmProperty) #>; }
			set { this.SetProperty(ref this._<#=code.Escape(edmProperty) #>, value); }
        }

		/// <summary> <#=code.Escape(edmProperty) #> backing field</summary>
        private <#=code.GetTypeName(edmProperty.TypeUsage) #> _<#=code.Escape(edmProperty) #>;


<#
            }
            else
            {
#>
		public <#=code.GetTypeName(edmProperty.TypeUsage) #> <#=code.Escape(edmProperty) #> { get; set; }

<#
            }
        }

        // Complex
        foreach (var complexProperty in complexProperties)
        {
#>
		/// <summary> Gets or sets the <#=code.Escape(complexProperty) #> property</summary>
		public <#=code.GetTypeName(complexProperty.TypeUsage) #> <#=code.Escape(complexProperty) #> { get; set; }

<#
        }

        // Navigation
        foreach (var navigationProperty in navigationProperties.OrderBy(o => o.ToEndMember.RelationshipMultiplicity))
        {
#>
		/// <summary> Gets or sets the <#=code.Escape(navigationProperty) #> navigation property</summary>
<#
		    if (navigationProperty.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many)
            {
#>
		[SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
<#
            }
#>
		public virtual <#=code.GetTypeName(navigationProperty.TypeUsage) #> <#=code.Escape(navigationProperty) #> { get; set; }

<#
        }
#>
<# /* End Properties */ #>
<# /* Begin IEditableObject */ #>
<#
		if (TessaConfig.UseIEditableObject)
        {
#>	        
		#region IEditableObject

		private <#=code.Escape(entity) #>_Backup _<#=code.Escape(entity) #>_Backup;

		private struct <#=code.Escape(entity) #>_Backup 
		{
<#
			foreach (var edmProperty in simpleProperties)
            {
#>
			internal <#=code.Escape(edmProperty.TypeUsage) #> _<#=code.Escape(edmProperty) #>;
<#
            }
#>
		}

        public void BeginEdit()
        {
			_<#=code.Escape(entity) #>_Backup = new <#=code.Escape(entity) #>_Backup() 
			{
<#
	        foreach (var edmProperty in simpleProperties)
            {
#>
				_<#=code.Escape(edmProperty) #> = <#=code.Escape(edmProperty) #>,
<#
            }
#>
			};
		}

		public void CancelEdit()
        {
<#
			foreach (var edmProperty in simpleProperties)
            {
#>
			<#=code.Escape(edmProperty) #> = _<#=code.Escape(entity) #>_Backup._<#=code.Escape(edmProperty) #>;
<#
            }
#>
        }

        public void EndEdit()
        {
<#
			foreach (var edmProperty in simpleProperties)
            {
#>
			_<#=code.Escape(entity) #>_Backup._<#=code.Escape(edmProperty) #> = <#=code.Escape(edmProperty) #>;
<#
            }
#>
        }

		#endregion
<#
        }
#>
<# /* End IEditableObject */ #>
<# /* Begin SampleData */ #> 
<#
        if (TessaConfig.GenerateSampleData)
        {
#>
		#region SampleData

		public static <#=code.Escape(entity) #> GetRandom<#=code.Escape(entity) #>()
        {
            return new <#=code.Escape(entity) #>()
            {
<#
            int counter = 0;
            int count = simpleProperties.Count;
            foreach (var edmProperty in simpleProperties)
            {
                string continueChar = ",";
                if (counter > (count - 2))
                {
                    continueChar = string.Empty;
                }


                string propType = code.Escape(edmProperty.TypeUsage);
                if (propType == "string")
                {
#>
				<#=code.Escape(edmProperty) #> = "<#=
                        TessaRandomDataGenerator.GetRandomString(
                            TessaEntityHelpers.GetAttribute_MaxLength(edmProperty)) #>"<#=continueChar #>
<#
                }
                else if (propType == "bool")
                {
#>
				<#=code.Escape(edmProperty) #> = <#=TessaRandomDataGenerator.GetRandomBool() #><#=continueChar #>
<#
                }
                else if (propType.Contains("Date"))
                {
#>
				<#=code.Escape(edmProperty) #> = DateTime.Parse("<#=TessaRandomDataGenerator.GetRandomDate() #>")<#=continueChar #>
<#
                }
                else if (propType == "int")
                {
                    int value = TessaRandomDataGenerator.GetRandomInt(1, 200000);
                    if (ef.IsKey(edmProperty))
                    {
                        value = TessaRandomDataGenerator.GetNextInt();
                    }

#>
				<#=code.Escape(edmProperty) #> = <#=value #><#=continueChar #>
<#
                }

                counter++;
            }
#>
            };
        }

		public static IList<<#=code.Escape(entity) #>> GetRandom<#=code.Escape(entity) #>s()
        {
			var list = new List<<#=code.Escape(entity) #>>();
			
<#
            for (int i = 0; i < 5; i++)
            {
#>
			list.Add(new <#=code.Escape(entity)#>()
			{
<#
                counter = 0;
                count = simpleProperties.Count;
                foreach (var edmProperty in simpleProperties)
				{
					string continueChar = ",";
					if (counter > (count - 2))
					{
						continueChar = string.Empty;
					}


					string propType = code.Escape(edmProperty.TypeUsage);
					if (propType == "string")
					{
#>
				<#=code.Escape(edmProperty) #> = "<#=
							TessaRandomDataGenerator.GetRandomString(
								TessaEntityHelpers.GetAttribute_MaxLength(edmProperty)) #>"<#=continueChar #>
<#
					}
					else if (propType == "bool")
					{
#>
				<#=code.Escape(edmProperty) #> = <#=TessaRandomDataGenerator.GetRandomBool() #><#=continueChar #>
<#
					}
					else if (propType.Contains("Date"))
					{
#>
				<#=code.Escape(edmProperty) #> = DateTime.Parse("<#=TessaRandomDataGenerator.GetRandomDate() #>")<#=continueChar #>
<#
					}
					else if (propType == "int")
					{
						int value = TessaRandomDataGenerator.GetRandomInt(1, 200000);
						if (ef.IsKey(edmProperty))
						{
							value = TessaRandomDataGenerator.GetNextInt();
						}
#>
				<#=code.Escape(edmProperty) #> = <#=value #><#=continueChar #>
<#
					}
					counter++;
				}
#>
			});

<#
            }
#>
			return list;
        }

		#endregion
<#
        }
#>
<# /* End SampleData */ #> 

	} 
} 

<# /*End ForLoop (Entities)*/#>
<#
    }





    /*
	 ██████╗ ██████╗ ███╗   ███╗██████╗ ██╗     ███████╗██╗  ██╗    ███████╗███╗   ██╗████████╗██╗████████╗██╗███████╗███████╗
	██╔════╝██╔═══██╗████╗ ████║██╔══██╗██║     ██╔════╝╚██╗██╔╝    ██╔════╝████╗  ██║╚══██╔══╝██║╚══██╔══╝██║██╔════╝██╔════╝
	██║     ██║   ██║██╔████╔██║██████╔╝██║     █████╗   ╚███╔╝     █████╗  ██╔██╗ ██║   ██║   ██║   ██║   ██║█████╗  ███████╗
	██║     ██║   ██║██║╚██╔╝██║██╔═══╝ ██║     ██╔══╝   ██╔██╗     ██╔══╝  ██║╚██╗██║   ██║   ██║   ██║   ██║██╔══╝  ╚════██║
	╚██████╗╚██████╔╝██║ ╚═╝ ██║██║     ███████╗███████╗██╔╝ ██╗    ███████╗██║ ╚████║   ██║   ██║   ██║   ██║███████╗███████║
	 ╚═════╝ ╚═════╝ ╚═╝     ╚═╝╚═╝     ╚══════╝╚══════╝╚═╝  ╚═╝    ╚══════╝╚═╝  ╚═══╝   ╚═╝   ╚═╝   ╚═╝   ╚═╝╚══════╝╚══════╝
    */
	foreach (var complex in typeMapper.GetItemsToGenerate<ComplexType>(itemCollection))
	{
	    var filename = $"{complex.Name}.cs";
	    fileManager.StartNewFile(filename);
#>
//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//
//
// <copyright file="<#=filename #>." company="<#=TessaConfig.CompanyName #>">
//     Copyright (c) <#=TessaConfig.CompanyName #>. All Rights Reserved.
// </copyright>
//------------------------------------------------------------------------------

<# /* Begin Using */ #>
using Prism.Mvvm;
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Diagnostics.CodeAnalysis;

<# /* Begin Namespace */ #>
namespace <#=code.EscapeNamespace(code.VsNamespaceSuggestion()) #>
{
<#
        var inherits = new List<string>();

        if (TessaConfig.UseINotifyPropertyChanged)
            inherits.Add("BindableBase");

        if (TessaConfig.UseIEditableObject)
            inherits.Add("IEditableObject");

        var inheritString = string.Join(", ", inherits);

        if (inherits.Any())
            inheritString = ": " + inheritString;
#>
	[GeneratedCode("<#=TessaConfig.AppName #>", "<#=TessaConfig.AppVersion #>")]
	/// <summary> <#=code.Escape(complex) #> model class.</summary>
	public partial class <#=code.Escape(complex) #> <#=inheritString #>
    {
<# /* Begin Constrctor */ #>
<#
        var propertiesWithDefaultValues = typeMapper.GetPropertiesWithDefaultValues(complex).ToList();

        var simpleProperties = typeMapper.GetSimpleProperties(complex).ToList();
        var complexProperties = typeMapper.GetComplexProperties(complex).ToList();

        if (propertiesWithDefaultValues.Any() || complexProperties.Any())
        {
#>
		/// <summary> Initializes a new instance of the <see cref="<#=code.Escape(complex) #>"/> class.</summary>
		[SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
		public <#=code.Escape(complex) #>()
		{
<#
			foreach (var edmProperty in propertiesWithDefaultValues)
            {
#>
			this.<#=code.Escape(edmProperty) #> = <#=code.CreateLiteral(edmProperty.DefaultValue) #>;
<#
            }
		
			foreach (var complexProperty in complexProperties)
            {
#>
			this.<#=code.Escape(complexProperty) #> = new <#=code.GetTypeName(complexProperty.TypeUsage) #>();
<#
            }
#>
        }
<#
        }
#>	
<# /* End Constrctor */ #>
<# /* Begin Properties */ #>
<#
        // Simple
        foreach (var edmProperty in simpleProperties)
        {
#>
        /// <summary>Gets or sets the <#=code.Escape(edmProperty) #> property</summary>
<#
			if (TessaConfig.UseAttributes)
            {
                var attributes = new List<string>();
                if (ef.IsKey(edmProperty))
                    attributes.Add("Key");

                if (!ef.IsNullable(edmProperty))
                    attributes.Add("Required");

                var maxlength = TessaEntityHelpers.GetAttribute_MaxLength(edmProperty);
                if (maxlength > 0)
                    attributes.Add($"StringLength({maxlength})");

                var displayName = TessaEntityHelpers.GetAttribute_DisplayName(code.Escape(edmProperty));

                if (attributes.Any())
                {
#>
		[<#=string.Join(", ", attributes) #>]
<#
                }
#>
		[DisplayName("<#=displayName #>"), Display(Name = "<#=displayName #>")]
<#
            }

            if (TessaConfig.UseINotifyPropertyChanged)
            {
#>
		public <#=code.GetTypeName(edmProperty.TypeUsage) #> <#=code.Escape(edmProperty) #>
        {
            get { return this._<#=code.Escape(edmProperty) #>; }
			set { this.SetProperty(ref this._<#=code.Escape(edmProperty) #>, value); }
        }

		/// <summary> <#=code.Escape(edmProperty) #> backing field</summary>
        private <#=code.GetTypeName(edmProperty.TypeUsage) #> _<#=code.Escape(edmProperty) #>;


<#
            }
            else
            {
#>
		public <#=code.GetTypeName(edmProperty.TypeUsage) #> <#=code.Escape(edmProperty) #> { get; set; }

<#
            }
        }

        // Complex
        foreach (var complexProperty in complexProperties)
        {
#>
		/// <summary> Gets or sets the <#=code.Escape(complexProperty) #> property</summary>
		public <#=code.GetTypeName(complexProperty.TypeUsage) #> <#=code.Escape(complexProperty) #> { get; set; }

<#
        }

#>
<# /* End Properties */ #>
<# /* Begin IEditableObject */ #>
<#
		if (TessaConfig.UseIEditableObject)
        {
#>	        
		#region IEditableObject

		private <#=code.Escape(complex) #>_Backup _<#=code.Escape(complex) #>_Backup;

		private struct <#=code.Escape(complex) #>_Backup 
		{
<#
			foreach (var edmProperty in simpleProperties)
            {
#>
			internal <#=code.Escape(edmProperty.TypeUsage) #> _<#=code.Escape(edmProperty) #>;
<#
            }
#>
		}

        public void BeginEdit()
        {
			_<#=code.Escape(complex) #>_Backup = new <#=code.Escape(complex) #>_Backup() 
			{
<#
	        foreach (var edmProperty in simpleProperties)
            {
#>
				_<#=code.Escape(edmProperty) #> = <#=code.Escape(edmProperty) #>,
<#
            }
#>
			};
		}

		public void CancelEdit()
        {
<#
			foreach (var edmProperty in simpleProperties)
            {
#>
			<#=code.Escape(edmProperty) #> = _<#=code.Escape(complex) #>_Backup._<#=code.Escape(edmProperty) #>;
<#
            }
#>
        }

        public void EndEdit()
        {
<#
			foreach (var edmProperty in simpleProperties)
            {
#>
			_<#=code.Escape(complex) #>_Backup._<#=code.Escape(edmProperty) #> = <#=code.Escape(edmProperty) #>;
<#
            }
#>
        }

		#endregion
<#
        }
#>
<# /* End IEditableObject */ #>
<# /* Begin SampleData */ #> 
<#
        if (TessaConfig.GenerateSampleData)
        {
#>
		#region SampleData

		public static <#=code.Escape(complex) #> GetRandom<#=code.Escape(complex) #>()
        {
            return new <#=code.Escape(complex) #>()
            {
<#
            int counter = 0;
            int count = simpleProperties.Count;
            foreach (var edmProperty in simpleProperties)
            {
                string continueChar = ",";
                if (counter > (count - 2))
                {
                    continueChar = string.Empty;
                }


                string propType = code.Escape(edmProperty.TypeUsage);
                if (propType == "string")
                {
#>
				<#=code.Escape(edmProperty) #> = "<#=
                        TessaRandomDataGenerator.GetRandomString(
                            TessaEntityHelpers.GetAttribute_MaxLength(edmProperty)) #>"<#=continueChar #>
<#
                }
                else if (propType == "bool")
                {
#>
				<#=code.Escape(edmProperty) #> = <#=TessaRandomDataGenerator.GetRandomBool() #><#=continueChar #>
<#
                }
                else if (propType.Contains("Date"))
                {
#>
				<#=code.Escape(edmProperty) #> = DateTime.Parse("<#=TessaRandomDataGenerator.GetRandomDate() #>")<#=continueChar #>
<#
                }
                else if (propType == "int")
                {
                    int value = TessaRandomDataGenerator.GetRandomInt(1, 200000);
                    if (ef.IsKey(edmProperty))
                    {
                        value = TessaRandomDataGenerator.GetNextInt();
                    }

#>
				<#=code.Escape(edmProperty) #> = <#=value #><#=continueChar #>
<#
                }

                counter++;
            }
#>
            };
        }

		public static IList<<#=code.Escape(complex) #>> GetRandom<#=code.Escape(complex) #>s()
        {
			var list = new List<<#=code.Escape(complex) #>>();
			
<#
            for (int i = 0; i < 5; i++)
            {
#>
			list.Add(new <#=code.Escape(complex)#>()
			{
<#
                counter = 0;
                count = simpleProperties.Count;
                foreach (var edmProperty in simpleProperties)
				{
					string continueChar = ",";
					if (counter > (count - 2))
					{
						continueChar = string.Empty;
					}


					string propType = code.Escape(edmProperty.TypeUsage);
					if (propType == "string")
					{
#>
				<#=code.Escape(edmProperty) #> = "<#=
							TessaRandomDataGenerator.GetRandomString(
								TessaEntityHelpers.GetAttribute_MaxLength(edmProperty)) #>"<#=continueChar #>
<#
					}
					else if (propType == "bool")
					{
#>
				<#=code.Escape(edmProperty) #> = <#=TessaRandomDataGenerator.GetRandomBool() #><#=continueChar #>
<#
					}
					else if (propType.Contains("Date"))
					{
#>
				<#=code.Escape(edmProperty) #> = DateTime.Parse("<#=TessaRandomDataGenerator.GetRandomDate() #>")<#=continueChar #>
<#
					}
					else if (propType == "int")
					{
						int value = TessaRandomDataGenerator.GetRandomInt(1, 200000);
						if (ef.IsKey(edmProperty))
						{
							value = TessaRandomDataGenerator.GetNextInt();
						}
#>
				<#=code.Escape(edmProperty) #> = <#=value #><#=continueChar #>
<#
					}
					counter++;
				}
#>
			});

<#
            }
#>
			return list;
        }

		#endregion
<#
        }
#>
<# /* End SampleData */ #> 

	} 
} 

<# /*End ForLoop (Entities)*/#>
<#
    }


    fileManager.Process();
#>





<#+






	/*
	 ██████╗ ██████╗ ███╗   ██╗███████╗██╗ ██████╗ ███████╗
	██╔════╝██╔═══██╗████╗  ██║██╔════╝██║██╔════╝ ██╔════╝
	██║     ██║   ██║██╔██╗ ██║█████╗  ██║██║  ███╗███████╗
	██║     ██║   ██║██║╚██╗██║██╔══╝  ██║██║   ██║╚════██║
	╚██████╗╚██████╔╝██║ ╚████║██║     ██║╚██████╔╝███████║
	 ╚═════╝ ╚═════╝ ╚═╝  ╚═══╝╚═╝     ╚═╝ ╚═════╝ ╚══════╝
	 */

	/// <summary> T4 Config file.</summary>
	public static class TessaConfig 
	{
	    public enum TechnologyType
	    {
	        NONE   = 0,
	        ASPNET = 1,
	        WPF    = 2,
	    }

		/* Application */

		/// <summary> Gets or sets the AppName property.</summary>
		public static string AppName { get; set; } = "Tessa";
	
		/// <summary> Gets or sets the AppVersion property.</summary>
		public static string AppVersion { get; set; } = "1.0.0.0";

		/// <summary> Gets or sets the CompanyName property.</summary>
		public static string CompanyName { get; set; } = "Western Beef";

	    /// <summary> Gets or sets the Technology property. Currently unused.</summary>
	    public static TechnologyType Technology { get; set; } = TechnologyType.NONE;


		/* Options */

		/// <summary> Gets or sets the InputFile property.</summary>
		public static string InputFile { get; set; }


		/// <summary> Gets or sets the UseAttributes property.</summary>
		public static bool UseAttributes { get; set; }

		/// <summary> Gets or sets the UseIEditableObject property.</summary>
		public static bool UseIEditableObject { get; set; }

		/// <summary> Gets or sets the UseINotifyPropertyChanged property.</summary>
		public static bool UseINotifyPropertyChanged { get; set; }

		/// <summary> Gets or sets the UseINotifyPropertyChanged property.</summary>
		public static bool GenerateSampleData { get; set; }

	    /// <summary> Gets or sets the GenerateUnitTests property. Currently unused.</summary>
	    public static bool GenerateUnitTests { get; set; }

	    /// <summary> Gets or sets the GenerateOData property. Currently unused.</summary>
	    public static bool GenerateOData { get; set; }

	}





    private static void ArgumentNotNull<T>(T arg, string name) where T : class
    {
        if (arg == null)
        {
            throw new ArgumentNullException(name);
        }
    }





 





    /*
	████████╗██╗   ██╗██████╗ ███████╗		███╗   ███╗ █████╗ ██████╗ ██████╗ ███████╗██████╗ 
	╚══██╔══╝╚██╗ ██╔╝██╔══██╗██╔════╝		████╗ ████║██╔══██╗██╔══██╗██╔══██╗██╔════╝██╔══██╗
	   ██║    ╚████╔╝ ██████╔╝█████╗		██╔████╔██║███████║██████╔╝██████╔╝█████╗  ██████╔╝
	   ██║     ╚██╔╝  ██╔═══╝ ██╔══╝		██║╚██╔╝██║██╔══██║██╔═══╝ ██╔═══╝ ██╔══╝  ██╔══██╗
	   ██║      ██║   ██║     ███████╗		██║ ╚═╝ ██║██║  ██║██║     ██║     ███████╗██║  ██║
	   ╚═╝      ╚═╝   ╚═╝     ╚══════╝		╚═╝     ╚═╝╚═╝  ╚═╝╚═╝     ╚═╝     ╚══════╝╚═╝  ╚═╝
     */
    public class TypeMapper
    {
        private const string ExternalTypeNameAttributeName = @"http://schemas.microsoft.com/ado/2006/04/codegeneration:ExternalTypeName";

        private readonly System.Collections.IList _errors;
        private readonly CodeGenerationTools _code;
        private readonly MetadataTools _ef;

        public TypeMapper(CodeGenerationTools code, MetadataTools ef, System.Collections.IList errors)
        {
            ArgumentNotNull(code, "code");
            ArgumentNotNull(ef, "ef");
            ArgumentNotNull(errors, "errors");

            _code = code;
            _ef = ef;
            _errors = errors;
        }

        public string GetTypeName(TypeUsage typeUsage)
        {
            return typeUsage == null ? null : GetTypeName(typeUsage.EdmType, _ef.IsNullable(typeUsage));
        }

        public string GetTypeName(TypeUsage typeUsage, string modelNamespace)
        {
            return typeUsage == null ? null : GetTypeName(typeUsage.EdmType, _ef.IsNullable(typeUsage), modelNamespace);
        }

        public string GetTypeName(EdmType edmType, bool? isNullable = null, string modelNamespace = null)
        {
            if (edmType == null)
            {
                return null;
            }

            if (edmType is CollectionType collectionType)
            {
                return String.Format(CultureInfo.InvariantCulture, "ICollection<{0}>",
                    GetTypeName(collectionType.TypeUsage, modelNamespace));
            }

            var typeName = _code.Escape(edmType.MetadataProperties
                               .Where(p => p.Name == ExternalTypeNameAttributeName)
                               .Select(p => (string) p.Value)
                               .FirstOrDefault())
                           ?? (modelNamespace != null && edmType.NamespaceName != modelNamespace
                               ? _code.CreateFullName(_code.EscapeNamespace(edmType.NamespaceName),
                                   _code.Escape(edmType))
                               : _code.Escape(edmType));

            if (edmType is StructuralType)
            {
                return typeName;
            }

            if (edmType is SimpleType)
            {
                var clrType = UnderlyingClrType(edmType);
                if (!IsEnumType(edmType))
                {
                    typeName = _code.Escape(clrType);
                }

                return clrType.IsValueType && isNullable == true
                    ? String.Format(CultureInfo.InvariantCulture, "Nullable<{0}>", typeName)
                    : typeName;
            }

            throw new ArgumentException("edmType");
        }

        public Type UnderlyingClrType(EdmType edmType)
        {
            ArgumentNotNull(edmType, "edmType");

            if (edmType is PrimitiveType primitiveType)
            {
                return primitiveType.ClrEquivalentType;
            }

            if (IsEnumType(edmType))
            {
                return GetEnumUnderlyingType(edmType).ClrEquivalentType;
            }

            return typeof(object);
        }

        private bool IsEnumType(GlobalItem edmType)
        {
            ArgumentNotNull(edmType, "edmType");

            return edmType.GetType().Name == "EnumType";
        }

        private PrimitiveType GetEnumUnderlyingType(EdmType enumType)
        {
            ArgumentNotNull(enumType, "enumType");

            return (PrimitiveType) enumType.GetType().GetProperty("UnderlyingType")?.GetValue(enumType, null);
        }


        public bool VerifyCaseInsensitiveTypeUniqueness(IEnumerable<string> types, string sourceFile)
        {
            var enumerable = types.ToList();
            ArgumentNotNull(enumerable, "types");
            ArgumentNotNull(sourceFile, "sourceFile");

            var hash = new HashSet<string>(StringComparer.InvariantCultureIgnoreCase);
            if (enumerable.Any(item => !hash.Add(item)))
            {
                _errors.Add(
                    new CompilerError(sourceFile, -1, -1, "6023",
                        string.Format(CultureInfo.CurrentCulture,
                            CodeGenerationTools.GetResourceString("Template_CaseInsensitiveTypeConflict"))));
                return false;
            }

            return true;
        }





        public IEnumerable<T> GetItemsToGenerate<T>(IEnumerable<GlobalItem> itemCollection) where T : EdmType
        {
            return itemCollection
                .OfType<T>()
                .Where(i => i.MetadataProperties.All(p => p.Name != ExternalTypeNameAttributeName))
                .OrderBy(i => i.Name);
        }

        public IEnumerable<string> GetAllGlobalItems(IEnumerable<GlobalItem> itemCollection)
        {
            return itemCollection
                .Where(i => i is EntityType || i is ComplexType || i is EntityContainer || IsEnumType(i))
                .Select(GetGlobalItemName);
        }

        private string GetGlobalItemName(GlobalItem item)
        {
            if (item is EdmType type)
            {
                return type.Name;
            }

            if (item is EntityContainer container)
            {
                return container.Name;
            }

            return null;
        }





        public IEnumerable<EdmProperty> GetSimpleProperties(EntityType type)
        {
            return type.Properties.Where(p => p.TypeUsage.EdmType is SimpleType && p.DeclaringType == type);
        }

        public IEnumerable<EdmProperty> GetSimpleProperties(ComplexType type)
        {
            return type.Properties.Where(p => p.TypeUsage.EdmType is SimpleType && p.DeclaringType == type);
        }

        public IEnumerable<EdmProperty> GetComplexProperties(EntityType type)
        {
            return type.Properties.Where(p => p.TypeUsage.EdmType is ComplexType && p.DeclaringType == type);
        }

        public IEnumerable<EdmProperty> GetComplexProperties(ComplexType type)
        {
            return type.Properties.Where(p => p.TypeUsage.EdmType is ComplexType && p.DeclaringType == type);
        }

        public IEnumerable<EdmProperty> GetPropertiesWithDefaultValues(EntityType type)
        {
            return type.Properties.Where(p =>
                p.TypeUsage.EdmType is SimpleType && p.DeclaringType == type && p.DefaultValue != null);
        }

        public IEnumerable<EdmProperty> GetPropertiesWithDefaultValues(ComplexType type)
        {
            return type.Properties.Where(p =>
                p.TypeUsage.EdmType is SimpleType && p.DeclaringType == type && p.DefaultValue != null);
        }

        public IEnumerable<NavigationProperty> GetNavigationProperties(EntityType type)
        {
            return type.NavigationProperties.Where(np => np.DeclaringType == type);
        }

        public IEnumerable<NavigationProperty> GetCollectionNavigationProperties(EntityType type)
        {
            return type.NavigationProperties.Where(np =>
                np.DeclaringType == type && np.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many);
        }





        private FunctionParameter GetReturnParameter(EdmFunction edmFunction)
        {
            ArgumentNotNull(edmFunction, "edmFunction");

            var returnParamsProperty = edmFunction.GetType().GetProperty("ReturnParameters");
            return returnParamsProperty == null
                ? edmFunction.ReturnParameter
                : ((IEnumerable<FunctionParameter>) returnParamsProperty.GetValue(edmFunction, null)).FirstOrDefault();
        }

        public IEnumerable<FunctionImportParameter> GetParameters(EdmFunction edmFunction)
        {
            return FunctionImportParameter.Create(edmFunction.Parameters, _code, _ef);
        }

        public TypeUsage GetReturnType(EdmFunction edmFunction)
        {
            var returnParam = GetReturnParameter(edmFunction);
            return returnParam == null ? null : _ef.GetElementType(returnParam.TypeUsage);
        }

        public bool GenerateMergeOptionFunction(EdmFunction edmFunction, bool includeMergeOption)
        {
            var returnType = GetReturnType(edmFunction);
            return !includeMergeOption && returnType != null &&
                   returnType.EdmType.BuiltInTypeKind == BuiltInTypeKind.EntityType;
        }
    }





    /*
	 █████╗ ████████╗████████╗██████╗ ██╗██████╗ ██╗   ██╗████████╗███████╗███████╗
	██╔══██╗╚══██╔══╝╚══██╔══╝██╔══██╗██║██╔══██╗██║   ██║╚══██╔══╝██╔════╝██╔════╝
	███████║   ██║      ██║   ██████╔╝██║██████╔╝██║   ██║   ██║   █████╗  ███████╗
	██╔══██║   ██║      ██║   ██╔══██╗██║██╔══██╗██║   ██║   ██║   ██╔══╝  ╚════██║
	██║  ██║   ██║      ██║   ██║  ██║██║██████╔╝╚██████╔╝   ██║   ███████╗███████║
	╚═╝  ╚═╝   ╚═╝      ╚═╝   ╚═╝  ╚═╝╚═╝╚═════╝  ╚═════╝    ╚═╝   ╚══════╝╚══════╝
	*/
    private static class TessaEntityHelpers
    {
        public static int GetAttribute_MaxLength(EdmProperty prop) // modify me to return "int.Max" rather than the int.Max value
        {
            var x = prop.TypeUsage.Facets.FirstOrDefault(g => g.Name == "MaxLength");
            if (x == null)
                return 0;

            if (x.Value.ToString().ToLower() == "max")
                return int.MaxValue;

            if (int.TryParse(x.Value.ToString(), out var v))
                return v;

            return 0;
        }

        public static string GetAttribute_DisplayName(string sIn)
        {
            if (System.Text.RegularExpressions.Regex.IsMatch(sIn, "^[A-Z]+$"))
            {
                return sIn;
            }

            if (string.IsNullOrEmpty(sIn))
            {
                return "";
            }

            char[] letters = sIn.ToCharArray();
            StringBuilder sOut = new StringBuilder();
            int index = 0;

            if (sIn.Contains("ID"))
            {
                sOut.Append(letters[0]);
                sOut.Append(sIn.Substring(1, (sIn.Length - 1)));
            }
            else
            {
                foreach (var c in letters)
                {
                    if ((index == 0))
                    {
                        sOut.Append(" ");
                        sOut.Append(c.ToString().ToUpper());
                    }
                    else if (char.IsUpper(c))
                    {
                        sOut.Append(" ");
                        sOut.Append(c);
                    }
                    else
                    {
                        sOut.Append(c);
                    }

                    index += 1;
                }
            }

            return System.Text.RegularExpressions.Regex.Replace(sOut.ToString().Trim(), "(?<=[A-Z]) (?=[A-Z])", string.Empty);
        }
    }





	/*
	██████╗  █████╗ ███╗   ██╗██████╗  ██████╗ ███╗   ███╗    ██████╗  █████╗ ████████╗ █████╗     
	██╔══██╗██╔══██╗████╗  ██║██╔══██╗██╔═══██╗████╗ ████║    ██╔══██╗██╔══██╗╚══██╔══╝██╔══██╗    
	██████╔╝███████║██╔██╗ ██║██║  ██║██║   ██║██╔████╔██║    ██║  ██║███████║   ██║   ███████║    
	██╔══██╗██╔══██║██║╚██╗██║██║  ██║██║   ██║██║╚██╔╝██║    ██║  ██║██╔══██║   ██║   ██╔══██║    
	██║  ██║██║  ██║██║ ╚████║██████╔╝╚██████╔╝██║ ╚═╝ ██║    ██████╔╝██║  ██║   ██║   ██║  ██║    
	╚═╝  ╚═╝╚═╝  ╚═╝╚═╝  ╚═══╝╚═════╝  ╚═════╝ ╚═╝     ╚═╝    ╚═════╝ ╚═╝  ╚═╝   ╚═╝   ╚═╝  ╚═╝    
                                                                                                   
		 ██████╗ ███████╗███╗   ██╗███████╗██████╗  █████╗ ████████╗ ██████╗ ██████╗               
		██╔════╝ ██╔════╝████╗  ██║██╔════╝██╔══██╗██╔══██╗╚══██╔══╝██╔═══██╗██╔══██╗              
		██║  ███╗█████╗  ██╔██╗ ██║█████╗  ██████╔╝███████║   ██║   ██║   ██║██████╔╝              
		██║   ██║██╔══╝  ██║╚██╗██║██╔══╝  ██╔══██╗██╔══██║   ██║   ██║   ██║██╔══██╗              
		╚██████╔╝███████╗██║ ╚████║███████╗██║  ██║██║  ██║   ██║   ╚██████╔╝██║  ██║              
		 ╚═════╝ ╚══════╝╚═╝  ╚═══╝╚══════╝╚═╝  ╚═╝╚═╝  ╚═╝   ╚═╝    ╚═════╝ ╚═╝  ╚═╝              
                                                                                                   
	*/
    private static class TessaRandomDataGenerator
    {
        private static int _intValue;
        private static readonly Random Rnd;

        static TessaRandomDataGenerator()
        {
            _intValue = 0;
            Rnd = new Random();
        }


        public static int GetNextInt()
        {
            _intValue++;
            return _intValue;
        }

        public static int GetRandomInt(int min, int max)
        {
            var r = 1;

            for (var i = 0; i < 11; i++)
            {
                r = Rnd.Next(min, max);
            }

            return r;
        }

        public static Guid GetRandomGuid()
        {
            return Guid.NewGuid();
        }

        public static bool GetRandomBool()
        {
            var r = 1;

            for (var i = 0; i < 11; i++)
            {
                r = GetRandomInt(0, 1);
            }

            if (r == 1)
            {
                return true;
            }

            return false;
        }

        public static string GetRandomString(int maxLength = 20)
        {
            var paddingChar = Convert.ToChar("X");
            var x = string.Empty;
            return x.PadRight(maxLength, paddingChar);
        }

        public static DateTime GetCurrentDate()
        {
            return DateTime.Today;
        }

        public static DateTime GetRandomDate()
        {
            var year = GetRandomInt(1900, GetCurrentDate().Year);
            var month = GetRandomInt(1, 12);
            var day = GetRandomInt(1, 28);

            var hour = GetRandomInt(0, 23);
            var min = GetRandomInt(0, 59);
            var sec = GetRandomInt(0, 59);

            return new DateTime(year, month, day, hour, min, sec);
        }

        public static void Reset()
        {
            _intValue = 0;
        }
    }
#>
