//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//
//
// <copyright file="MikeDevEntities.cs" company="Multinerd">
//     Copyright (c) Multinerd. All Rights Reserved.
// </copyright>
//------------------------------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;
using System.Data.Entity.Core.Objects;
using System.Linq;

namespace EntityPlus
{
    /// <summary>Main entity context</summary>
    [GeneratedCode("Tessa", "1.2.3.4")]
	public partial class MikeDevEntities : DbContext
    {
        /// <summary>Connection String</summary>
#if DEBUG
		private const string SettingsConnectionString = "name=MikeDevEntities_dev";
#else
        private const string SettingsConnectionString = "name=MikeDevEntities";
#endif

        /// <summary>Initializes a new instance of the <see cref="MikeDevEntities"/> class.</summary>
        public MikeDevEntities() : base(SettingsConnectionString)
        {
        }

        /// <summary>Initializes a new instance of the <see cref="MikeDevEntities"/> class.</summary>
        /// <param name="connectionString">Database connection string</param>
        public MikeDevEntities(string connectionString) : base(connectionString)
        {
        }


		protected override void OnModelCreating(DbModelBuilder modelBuilder)
		{
			throw new UnintentionalCodeFirstException();
		}


		/// <summary>Gets the Album IDbSet property.</summary>
        public virtual IDbSet<Album> Album { get; set; }

		/// <summary>Gets the Artist IDbSet property.</summary>
        public virtual IDbSet<Artist> Artist { get; set; }

		/// <summary>Gets the Customer IDbSet property.</summary>
        public virtual IDbSet<Customer> Customer { get; set; }

		/// <summary>Gets the Employee IDbSet property.</summary>
        public virtual IDbSet<Employee> Employee { get; set; }

		/// <summary>Gets the Genre IDbSet property.</summary>
        public virtual IDbSet<Genre> Genre { get; set; }

		/// <summary>Gets the Invoice IDbSet property.</summary>
        public virtual IDbSet<Invoice> Invoice { get; set; }

		/// <summary>Gets the InvoiceLine IDbSet property.</summary>
        public virtual IDbSet<InvoiceLine> InvoiceLine { get; set; }

		/// <summary>Gets the MediaType IDbSet property.</summary>
        public virtual IDbSet<MediaType> MediaType { get; set; }

		/// <summary>Gets the Playlist IDbSet property.</summary>
        public virtual IDbSet<Playlist> Playlist { get; set; }

		/// <summary>Gets the Track IDbSet property.</summary>
        public virtual IDbSet<Track> Track { get; set; }

		public virtual ObjectResult<Test_Result> Test()
		{
			return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Test_Result>("Test");
		}

		public virtual ObjectResult<Test2_Result> Test2(Nullable<int> id)
		{
			var idParameter = id.HasValue ?
				new ObjectParameter("Id", id) :
				new ObjectParameter("Id", typeof(int));

			return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Test2_Result>("Test2", idParameter);
		}

    }
}

